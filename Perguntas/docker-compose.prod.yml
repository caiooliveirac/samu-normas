services:
  db:
    image: mariadb:11.4
    restart: unless-stopped
    environment:
      MARIADB_DATABASE: ${DB_NAME:-samu_q}
      MARIADB_USER: ${DB_USER:-samu_q}
      MARIADB_PASSWORD: ${DB_PASSWORD:-change-me}
      MARIADB_ROOT_PASSWORD: ${DB_PASSWORD:-change-me}
    volumes:
      - db_data:/var/lib/mysql
    healthcheck:
      # Usa o cliente 'mariadb' (binário padrão) e a senha root correta (MARIADB_ROOT_PASSWORD)
      # IMPORTANTE: usar $$ para evitar expansão pelo host; dentro do container vira $.
      test: ["CMD-SHELL", "mariadb -uroot -p$$MARIADB_ROOT_PASSWORD -e 'SELECT 1' 2>/dev/null || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 15
      start_period: 25s

  web:
    build:
      context: .
      dockerfile: Dockerfile.prod
      # Para forçar arquitetura (se build em x86 para t4g):
      # args: []
    # Opcional: descomente para centralizar envs
    # env_file:
    #   - .env.prod
    environment:
      DJANGO_SETTINGS_MODULE: samu_q.settings
      DJANGO_DEBUG: "False"
      DJANGO_SECRET_KEY: ${DJANGO_SECRET_KEY:-insecure-change-me}
      ALLOWED_HOSTS: ${ALLOWED_HOSTS:-localhost,127.0.0.1}
      # Origens confiáveis para CSRF (inclua esquema e porta quando não 80/443)
      # Ajustar para IP/Domínio público. Exemplo: http://3.150.194.173:8000
      CSRF_TRUSTED_ORIGINS: ${CSRF_TRUSTED_ORIGINS:-http://localhost:8000,http://127.0.0.1:8000}
      DB_NAME: ${DB_NAME:-samu_q}
      DB_USER: ${DB_USER:-samu_q}
      DB_PASSWORD: ${DB_PASSWORD:-change-me}
      DB_HOST: db
      DB_PORT: 3306
      DB_CONN_MAX_AGE: 60
      DB_ATOMIC_REQUESTS: "True"
      GUNICORN_WORKERS: ${GUNICORN_WORKERS:-3}
      GUNICORN_TIMEOUT: ${GUNICORN_TIMEOUT:-60}
      COLLECT_STATIC: ${COLLECT_STATIC:-1}
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - static_volume:/app/staticfiles
      - media_volume:/app/media
    healthcheck:
      test: ["CMD-SHELL", "python -c 'import socket; s=socket.socket(); s.connect((\"127.0.0.1\",8000)); s.close(); print(\"ok\")'"]
      interval: 30s
      timeout: 5s
      retries: 5
    command: ["/bin/sh", "-c", "./scripts/entrypoint.prod.sh"]

  nginx:
    image: nginx:1.27-alpine
    depends_on:
      - web
    ports:
      - "8000:80"
    volumes:
      - static_volume:/app/staticfiles:ro
      - media_volume:/app/media:ro
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
    healthcheck:
      test: ["CMD-SHELL", "wget -q -O /dev/null http://127.0.0.1/nginx-health || exit 1"]
      interval: 20s
      timeout: 5s
      retries: 5
      start_period: 10s

volumes:
  db_data:
  static_volume:
  media_volume:
